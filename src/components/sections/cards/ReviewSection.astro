---
import FullStar from "@/components/ui/stars/FullStar.astro";
import HalfStar from "@/components/ui/stars/HalfStar.astro";
import PrimaryCTA from "@/components/ui/buttons/PrimaryCTA.astro";
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import { getType } from "@/utils/utils";
import ListFilter from "../misc/ListFilter.astro";

// Define props from Astro
const { product } = Astro.props;

interface Props {
  product: CollectionEntry<"products">[];
}


---
<!-- Main div that wraps the testimonials section -->
<section
  class="max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full rounded-lg "
  id="testimonials"
>
  <!-- Title of the testimonials section -->
  <div class="mb-6 sm:mb-10 md:mb-16 flex flex-wrap gap-4">
    <h2
      class="text-balance text-2xl font-bold text-neutral-800 dark:text-neutral-200 sm:text-3xl lg:text-4xl"
      >
      Casions & Betting Companies
    </h2>
    <ListFilter/>
  </div>

  <div class="grid gap-6 lg:grid-cols-2 xl:grid-cols-3">
    <!-- Looping through each testimonial data and rendering it -->
    {
      product.map((p) => {

        
        const {data} = p;
        const { title, rating, type, main, imgMain, imgAlt } = data;
        
        const actualRating = rating % 1 >= 0.7 ? Math.ceil(rating) : Math.floor(rating);
        const isHalfStar = rating % 1 > 0.2 && rating % 1 < 0.7;

        return (
        <div data-offer data-category={type} class="w-80 sm:w-96 col-span-1 mx-auto ring-2 rounded-xl ring-neutral-300 dark:ring-neutral-700 text-neutral-800 dark:text-neutral-200">
          <div class="flex flex-col rounded-xl bg-neutral-50 dark:bg-neutral-700">
            
            <div class=" bg-neutral-300/30 p-4 dark:bg-neutral-900/30 md:px-7 rounded-t-xl">
              <div class="flex items-center">
 
                <Image
                  src={imgMain}
                  class="size-8 rounded-full h-[6rem] w-[6rem]"
                  alt={imgAlt}
                  format={"png"}
                  loading={"eager"}
                />

                <div class="ms-3 grow">
                  <p class="font-bold  text-xl">
                    {title}
                  </p>

                  <p class="text-sm font-semibold text-neutral-500 dark:text-neutral-200 ">
                    {getType(type)}
                  </p>
                
                  <div class="flex flex-col items-start mt-2">
                    <div class="flex space-x-1 ">
                      <div class="flex space-x-1">

                        {
                          actualRating > 0 && 
                          Array(actualRating)
                            .fill(0)
                            .map((_, i) => <FullStar key={i} />)
                        }
                        {
                          isHalfStar && <HalfStar />
                        }
                       
                      </div>
                     
                    </div>
                   
                  </div>
                </div>
              </div>
            </div>

            <div class="px-4 py-4 bg-gray-50 dark:bg-neutral-800">

              <p class="text-pretty text-neutral-600 dark:text-neutral-300 line-clamp-4">
                  {main.content}
               
              </p>


            </div>
             

            <div class="rounded-b-xl bg-neutral-300/30 dark:bg-neutral-900/30 p-2">

              <p class="text-xs text-neutral-500 dark:text-neutral-200 h-14 text-pretty mx-3 ">
                <PrimaryCTA title="View" url={"/products/" + p.slug} style="w-full" />
              </p>
                  
            </div>
          </div>
        </div>
      )
    })
    }
    </div>
    <p data-no-offers class="text-center text-xl mt-8 text-neutral-500 dark:text-neutral-400 hidden">
      No offers found.
    </p>
</section>

<script>
  window.addEventListener('filterCategory', (event) => {
    const selectedCategory = (event as CustomEvent).detail.category;
    
    const offers = document.querySelectorAll('[data-offer]');
    const noOffers = document.querySelectorAll('[data-no-offers]');

    let counter = 0;
    
    offers.forEach((offer) => {
      const offerCategory = offer.getAttribute('data-category');
      // Show all if category is 0 or match with the selected category
      if (selectedCategory == 0 || offerCategory == selectedCategory) {
        (offer as HTMLElement).style.display = 'block';
        counter++;
      } else {
        (offer as HTMLElement).style.display = 'none';
      }
    });

     if (counter === 0) {
      noOffers.forEach((noOffer) => {
        (noOffer as HTMLElement).style.display = 'block';
      });
    } else {
      noOffers.forEach((noOffer) => {
        (noOffer as HTMLElement).style.display = 'none';
      });
    }
  });
</script>
