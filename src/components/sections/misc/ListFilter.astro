---
import { languages, flagImages } from '@utils/ui';
import { getType } from '@/utils/utils';
import { Image } from 'astro:assets';

// Determine the selected language from the current URL
const langData = Astro.url.pathname.split('/')[1] as keyof typeof languages;
const selectedLanguage = !langData || langData.length > 2 ? 'en' : langData;

const categoryOnly = Astro.props.categoryOnly;


---

<div class="flex flex-col p-2 w-full md:flex-row gap-2 items-center justify-center px-2 bg-neutral-800 dark:bg-neutral-100">

  {!categoryOnly && (
    <ul class="flex gap-2 p-2 my-2 rounded-2xl dark:bg-neutral-700 bg-neutral-100 flex-wrap md:justify-start justify-center">
     {flagImages.map(({ lang, src }) => (
       <li>
        <button
          data-lang={lang}
          class={`text-neutral-800 dark:text-white  hover:bg-neutral-200 dark:hover:bg-neutral-500 p-2 rounded-lg font-semibold flex gap-4 ${selectedLanguage == lang ? 'bg-orange-400' : 'bg-transparent'}`}
          >
          {languages[lang as keyof typeof languages]}
          <Image
            src={src}
            alt={`${lang} flag`}
            class="h-6 w-auto"
          />
        </button>
      </li>
    ))}
  </ul>
  )}


  <!-- Category Filter Buttons -->
  <ul class="flex flex-wrap gap-2 p-2 rounded-2xl dark:bg-neutral-700 bg-neutral-100 md:justify-start justify-center">
    {Array.from({ length: 3 }, (_, i) => (
      <li>
        <button
          data-selecter
          class={`text-neutral-800 dark:text-white hover:bg-neutral-200 dark:hover:bg-neutral-500 p-2 rounded-lg text-nowrap font-semibold ${i === 0 ? 'bg-yellow-500' : 'bg-transparent'}`}
          value={i}
        >
          {getType(i, (Astro.currentLocale as keyof typeof languages) ?? 'en')}
        </button>
      </li>
    ))}
  </ul>

 
  </div>
</div>

<script define:vars={{languages}} is:inline>

  // Category filter logic
  const buttons = document.querySelectorAll('[data-selecter]');
  buttons.forEach((button) => {
    const category = button.getAttribute('value');
    button.addEventListener('click', () => {
      buttons.forEach((btn) => {
        if (btn !== button) {
          if (btn instanceof HTMLElement) {
            btn.style.backgroundColor = 'transparent';
          }
        } else {
          if (btn instanceof HTMLElement) {
            btn.style.backgroundColor = '#eab308';
          }
        }
      });
      const customEvent = new CustomEvent('filterCategory', { detail: { category } });
      window.dispatchEvent(customEvent);
    });
  });

   // Language picker logic (buttons instead of dropdown)
  const langButtons = document.querySelectorAll('[data-lang]');
  langButtons.forEach((button) => {
    const lang = button.getAttribute('data-lang');
    button.addEventListener('click', function (event) {
      event.preventDefault();
      const url = new URL(window.location.href);
      const pathParts = url.pathname.split('/').filter((part) => part && !Object.keys(languages).includes(part));

      const t = url.pathname.split("/")[1]
      
      // Disable the selection of the same language
      if ((t.length !== 2 && lang === 'en') || lang === t) return;
      
        pathParts.unshift(lang);

      url.pathname = pathParts.join('/');
      window.location.href = url.toString();
    });
  });
</script>
