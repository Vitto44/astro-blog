---
import { languages } from "@utils/ui";
import { getImage } from 'astro:assets'; // Import the getImage utility

// Determine the selected language from the current URL
const langData = Astro.url.pathname.split('/')[1] as keyof typeof languages;
const selectedLanguage = !langData || langData.length > 2 ? 'en' : langData;

// Dynamically load the flag image for the selected language
const flagImage = await getImage({
  src: `/src/images/flagIcons/${selectedLanguage}.png`,
  width: 24,
  height: 24,
  alt: `${selectedLanguage} flag`
});

// Preload the flag images for each language
const flagImages = await Promise.all(
  Object.keys(languages).map(async (lang) => {
    const flagImage = await getImage({
      src: `/src/images/flagIcons/${lang}.png`,
      width: 24,
      height: 24,
      alt: `${lang} flag`
    });
    return {
      lang,
      src: flagImage.src
    };
  })
);
---

<div class="hs-dropdown relative inline-flex">
  <button
    id="hs-dropdown-default"
    type="button"
    aria-label="Change language"
    class="hs-dropdown-toggle inline-flex items-center gap-x-2 rounded-lg px-1.5 py-1.5 text-sm font-medium text-neutral-600 outline-none ring-zinc-500 transition duration-300 hover:bg-neutral-200 hover:text-orange-400 dark:border-neutral-700 dark:text-neutral-400 dark:ring-zinc-200 dark:hover:bg-neutral-700 dark:hover:text-orange-300 dark:focus:outline-none"
  >
    <img src={flagImage.src} width=24 height=24 alt={`${selectedLanguage} flag`} />
    <svg
      class="size-4 hs-dropdown-open:rotate-180"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"><path d="m6 9 6 6 6-6"></path></svg
    >
  </button>

  <div
    class="hs-dropdown-menu duration !left-[58%] !top-[98%] w-36 mt-2 hidden !transform-none rounded-lg bg-neutral-50 p-2 opacity-0 shadow-md transition-[opacity,margin] before:absolute before:-top-4 before:start-0 before:h-4 before:w-full after:absolute after:-bottom-4 after:start-0 after:h-4 after:w-full hs-dropdown-open:opacity-100 dark:divide-neutral-700 dark:border dark:border-neutral-700 dark:bg-neutral-800 md:!left-[88%] md:!top-[100%]"
    aria-labelledby="hs-dropdown-hover-event"
  >
    {flagImages.map(({ lang, src }) => (
        <a
          href={`/${lang === "en" ? "" : lang}`}
          class={`text-neutral-800 dark:text-white p-2 cursor-pointer rounded-lg font-semibold hover:bg-yellow-400 mt-2 flex gap-2 justify-between ${selectedLanguage == lang ? 'bg-yellow-500' : 'bg-transparent'}`}
        >
          {languages[lang as keyof typeof languages]}
          <img width={24} height={24} alt={`${lang} flag`} src={src} />
        </a>
    ))}
  </div>
</div>

<!--Import the necessary Dropdown plugin-->
<!--https://preline.co/plugins/html/dropdown.html-->
<script>
  import "@preline/dropdown/index.js";
</script>

<script>
  import { languages } from "@utils/ui";
  // Type alias for supported languages
  type TLanguage = keyof typeof languages;
  // array of supported languages
  const supportedLanguages: TLanguage[] = Object.keys(languages) as TLanguage[];

  document.addEventListener("DOMContentLoaded", function () {
    const languageLinks = document.querySelectorAll(".hs-dropdown-menu a");
    languageLinks.forEach((element) => {
      const link = element as HTMLAnchorElement;
      const lang = link
        .getAttribute("href")
        ?.replace("/", "")
        .replace("/", "") as TLanguage;

      link.addEventListener("click", function (event) {
        event.preventDefault();

        const url = new URL(window.location.href);
        const pathParts = url.pathname
          .split("/")
          .filter((part) => part && !supportedLanguages.includes(part as TLanguage));

        // Disable the selection of the same language
        if (lang === url.pathname.split("/")[1]) return;

        if (
          url.pathname.includes("/post") ||
          url.pathname.includes("/insight")
        ) {
          if (url.pathname.includes("en")) {
            pathParts.unshift(lang);
            pathParts.splice(2, 0, lang);
          } else {
            pathParts.unshift(lang);
            pathParts.splice(2, 0, "en");
          }
        } else {
          if (lang !== "en") {
            pathParts.unshift(lang);
          }
        }

        url.pathname = pathParts.join("/");
        window.location.href = url.toString();
      });
    });
  });
</script>
