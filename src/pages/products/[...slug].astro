---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import { Image } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";
import { SITE } from "@data/constants";
import FullStar from "@/components/ui/stars/FullStar.astro";
import HalfStar from "@/components/ui/stars/HalfStar.astro";

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}

interface Props {
  product: CollectionEntry<"products">;
}

// This gets the static paths for all the unique products
export async function getStaticPaths() {
  const productEntries = await getCollection("products");
  return productEntries.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
}

const { product } = Astro.props;

const pageTitle: string = `${product.data.title} | ${SITE.title}`;

  const rating = product.data.rating;

 const actualRating = rating % 1 >= 0.7 ? Math.ceil(rating) : Math.floor(rating);
  const isHalfStar = rating % 1 > 0.2 && rating % 1 < 0.7;

---

<MainLayout title={pageTitle}>
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800"/>

  <div
    class="grid max-w-[85rem] grid-cols-8 px-2 py-10 lg:py-14 2xl:max-w-full"
  >

    <section
      class="flex gap-6 md:gap-16 md:flex-col flex-wrap col-span-8 pb-4 lg:col-span-2 border-b-2 lg:border-b-0 md:pr-4 lg:border-r-2 border-orange-300"
    >
      <div class="flex lg:flex-col justify-between lg:justify-start gap-6 lg:gap-8 col-span-2 w-full ">
        <div class="text-neutral-800 dark:text-neutral-200">

            <h1
              class="block text-2xl font-bold tracking-tighter lg:text-4xl "
              >
              {product.data.title}
            </h1>
            
            <p class="lg:text-xl font-semibold text-neutral-600 dark:text-neutral-400">
              {product.data.type}
            </p>

            <div class="flex space-x-1">

                {
                  actualRating > 0 && 
                  Array(actualRating)
                    .fill(0)
                    .map((_, i) => <FullStar key={i} />)
                }
                {
                  isHalfStar && <HalfStar />
                }
            </div>

      </div>
      <Image
        src={product.data.imgMain}
        class="w-[100px] lg:min-w-[220px] lg:mx-auto rounded-full lg:order-first"
        alt={product.data.imgAlt}
        format={"png"}
        loading={"eager"}
      />

        
         
    </div>
        
        
    {
      product.data && (
        <div class="rounded-lg p-4 mx-auto shadow-md bg-neutral-100 dark:bg-neutral-700 col-span-2 w-full text-center h-fit">
            <p class=" text-neutral-600 dark:text-neutral-300 mb-6 font-semibold">
                Bet ${product.data.investment}
              <span class=" text-neutral-800 dark:text-neutral-200 text-2xl font-bold">
                Get ${product.data.reward}
              </span>
                In {product.data.rewardType}!
            </p>
            <span class="text-sm mb-1 block font-semibold text-neutral-600 dark:text-neutral-400">
              
              Or Use Code: {product.data.code}

            </span>
            <PrimaryCTA title="Check Out" url={product.data.redeemLink} style="w-full"/>
          </div>
        )
      }


    </section>

    <div class="mx-auto md:px-4 pt-10 lg:pt-0 col-span-8 lg:col-span-6 w-full max-w-[85rem]">
    <nav
      class="mx-auto flex gap-y-px gap-x-2 sm:gap-x-4 sm:gap-y-0"
      aria-label="Tabs"
      role="tablist"
    >
      {
        product.data.tabs.map((tab, index: number) => (
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>
    <hr class="w-full mt-2 border-t border-neutral-300 dark:border-neutral-700 md:hidden" />

    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            <div >
              <h2
                class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl"
              >
                {product.data.longDescription.title}
              </h2>
             
              
              <div class="max-w-md space-y-6 my-8">
                 <div>
                      <h3 class="block text-xl font-bold text-neutral-800 dark:text-neutral-200 border-b-2 border-neutral-400 dark:border-neutral-700 w-fit pr-4">
                        Games
                      </h3>
                       <ul class="mt-2 flex gap-2 flex-wrap  ml-2">
                          {product.data.longDescription.games?.map((game) => (
                            <li class="bg-gray-300 dark:bg-gray-600 text-black dark:text-white px-3 font-semibold py-1 rounded-md">{game}</li>
                          ))}
                          
                      </ul>
                  </div>
                 <div>
                      <h3 class="block text-xl font-bold text-neutral-800 dark:text-neutral-200 border-b-2 border-neutral-400 dark:border-neutral-700 w-fit pr-4">
                        Countries
                      </h3>
                       <ul class="mt-2 flex gap-2 flex-wrap  ml-2">
                          {product.data.longDescription.countries?.map((country) => (
                            <li class="bg-gray-300 dark:bg-gray-600 text-black dark:text-white px-3 font-semibold py-1 rounded-md">{country}</li>
                          ))}

                      </ul>
                  </div>
                 <div>
                      <h3 class="block text-xl font-bold text-neutral-800 dark:text-neutral-200 border-b-2 border-neutral-400 dark:border-neutral-700 w-fit pr-4">
                        Deposit Methods
                      </h3>
                       <ul class="mt-2 flex gap-2 flex-wrap  ml-2">
                          {product.data.longDescription.depositMethods?.map((country) => (
                            <li class="bg-gray-300 dark:bg-gray-600 text-black dark:text-white px-3 font-semibold py-1 rounded-md">{country}</li>
                          ))}

                      </ul>
                  </div>
                 <div>
                      <h3 class="block text-xl font-bold text-neutral-800 dark:text-neutral-200 border-b-2 border-neutral-400 dark:border-neutral-700 w-fit pr-4">
                        Customer Support
                      </h3>
                      <p class="mt-2 text-neutral-600 dark:text-neutral-400 ml-2 text-lg">
                        {product.data.longDescription.customerSupport}
                      </p>
                  </div>
                 <div>
                      <h3 class="block text-xl font-bold text-neutral-800 dark:text-neutral-200 border-b-2 border-neutral-400 dark:border-neutral-700 w-fit pr-4">
                        License
                      </h3>
                      <p class="mt-2 text-neutral-600 dark:text-neutral-400 ml-2 text-lg">
                        {product.data.longDescription.license}
                      </p>
                  </div>
              </div>
             
            </div>
            
            
            <div class="space-y-6">
               <h2 class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl">
                  Review
                </h2>
              
                <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                  {product.data.longDescription.subTitle}
                </p>

                <div class="space-y-6 lg:space-y-10 mt-4">

                        <div>
                          <h3 class="text-lg font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg">
                            Pros
                          </h3>
                          <hr class={`h-px my-1 border-0 bg-green-500`}/>
                         <ul class="mt-1 font-semibold text-neutral-600 dark:text-neutral-400 ml-8 list-disc marker:text-green-500">
                            {product.data.longDescription.pros?.map((list) => (
                             
                                <li>{list}</li>
                            ))}
                          </ul>
                        </div>

                         <div>
                          <h3 class="text-lg font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg ">
                            Cons
                          </h3>
                          <hr class={`h-px my-1 border-0 bg-red-500`}/>
                         <ul class="mt-1 font-semibold text-neutral-600 dark:text-neutral-400 ml-8 list-disc marker:text-red-500">
                            {product.data.longDescription.cons?.map((list) => (
                               
                                <li>{list}</li>
                            ))}
                          </ul>
                        </div>

                </div>
                   
            </div>
           
          </div>
        </div>
      </div>

      <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-6 pb-10 sm:px-6 lg:px-12 lg:pb-14 space-y-6">
          {product.data.howToClaim?.map((claim) => (

              <div class="space-y-3">
                <h2 class="text-balance text-xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-2xl border-b-2 p-2 w-fit border-gray-400 dark:border-gray-700">
                  {claim.title}
                </h2>
                <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                  {claim.content}
                </p>
                {claim.image && (
                  <Image
                    src={claim.image}
                    class="w-full rounded-lg max-h-[400px] object-cover"
                    alt={claim.imageAlt? claim.imageAlt : "Image"}
                    format={"png"}
                    loading={"eager"}
                  />
                )}
              </div>

          ))}
           
        </div>
      </div>

      <div id="tabs-with-card-3" class="hidden" role="tabpanel">
        <div class="mx-4 mb-8">
          <p class="text-neutral-600 dark:text-neutral-400">
            {product.data.termsAndConditions}
          </p>
    
          
        </div>
      </div>

    </div>
  </div>
  </div>

 

</MainLayout>

<script>
  import { gsap } from "gsap";

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }


  setElementAnimationDefaults("#fadeInUp", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });


  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });


  timeline.to(
    "#fadeInUp",
    { duration: 0.1, autoAlpha: 0.5, y: 0, ease: "power2.out" },
    "-=0.5"
  );


  timeline.to("#overlay", { duration: 0.5, autoAlpha: 0, delay: 0.2 });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: any, activeButton: any) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "active",
          "bg-neutral-100",
          "hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }

        changeHeadingStyle(
          btn,
          ["text-neutral-800", "dark:text-neutral-200"],
          ["text-orange-400", "dark:text-orange-300"]
        );
      }
    }

    function activateButton(button: any) {
      button.classList.add(
        "active",
        "bg-neutral-100",
        ",hover:border-transparent",
        "dark:bg-white/[.05]"
      );

      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }

      changeHeadingStyle(
        button,
        ["text-orange-400", "dark:text-orange-300"],
        ["text-neutral-800", "dark:text-neutral-200"]
      );
    }

    function changeHeadingStyle(
      button: any,
      addClasses: any,
      removeClasses: any
    ) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }

    const tabButtons = document.querySelectorAll("[data-target]");

    if (tabButtons.length > 0) {
      changeHeadingStyle(
        tabButtons[0],
        ["text-orange-400", "dark:text-orange-300"],
        []
      );
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
